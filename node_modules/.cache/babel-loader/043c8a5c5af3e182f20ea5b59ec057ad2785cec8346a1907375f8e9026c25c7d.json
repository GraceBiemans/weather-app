{"ast":null,"code":"var _jsxFileName = \"/Users/g/Desktop/weather-app/src/js/WeatherData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DayWeather from './DayWeather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherData = ({\n  selectedCityObject\n}) => {\n  _s();\n  const [weatherData, setWeatherData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [cityData, setCityData] = useState(selectedCityObject);\n  let url = `http://www.7timer.info/bin/api.pl?lon=${cityData.longitude}&lat=${cityData.latitude}&product=civillight&output=json`;\n  useEffect(() => {\n    setCityData(selectedCityObject);\n  }, [selectedCityObject]);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data && data.dataseries) {\n          setWeatherData(data.dataseries);\n        } else {\n          setError('No weather data found');\n        }\n      } catch (err) {\n        setError('Error fetching weather data');\n        console.error('Error fetching weather data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchWeatherData();\n  }, [cityData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"weather-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading weather data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 33\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), weatherData.length > 0 ? weatherData.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-item\",\n        children: /*#__PURE__*/_jsxDEV(DayWeather, {\n          weatherType: entry.weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No weather data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherData, \"7DjDLlhpU48H8/teAjxA3Foutq8=\");\n_c = WeatherData;\nexport default WeatherData;\nvar _c;\n$RefreshReg$(_c, \"WeatherData\");","map":{"version":3,"names":["React","useEffect","useState","DayWeather","jsxDEV","_jsxDEV","WeatherData","selectedCityObject","_s","weatherData","setWeatherData","loading","setLoading","error","setError","cityData","setCityData","url","longitude","latitude","fetchWeatherData","response","fetch","data","json","dataseries","err","console","children","id","fileName","_jsxFileName","lineNumber","columnNumber","style","color","length","map","entry","index","className","weatherType","weather","_c","$RefreshReg$"],"sources":["/Users/g/Desktop/weather-app/src/js/WeatherData.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport DayWeather from './DayWeather';\n\nconst WeatherData = ({selectedCityObject}) => {\n\n    const [weatherData, setWeatherData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [cityData, setCityData] = useState(selectedCityObject);\n\n    let url = `http://www.7timer.info/bin/api.pl?lon=${cityData.longitude}&lat=${cityData.latitude}&product=civillight&output=json`;\n\n    useEffect(() => {\n        setCityData(selectedCityObject);\n    }, [selectedCityObject])\n\n    useEffect(() => {\n        const fetchWeatherData = async () => {\n            try {\n                setLoading(true);\n\n                const response = await fetch(url);\n                const data = await response.json();\n\n                if (data && data.dataseries) {\n                    setWeatherData(data.dataseries);\n                } else {\n                    setError('No weather data found');\n                }\n            } catch (err) {\n                setError('Error fetching weather data');\n                console.error('Error fetching weather data:', err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchWeatherData();\n    }, [cityData]);\n\n    return (\n        <div>\n\n            <div id=\"weather-container\">\n                <div>\n                    {loading && <p>Loading weather data...</p>}\n                    {error && <p style={{ color: 'red' }}>{error}</p>}\n                </div>\n\n                {weatherData.length > 0 ? (\n                weatherData.map((entry, index) => (\n                    <div key={index} className=\"weather-item\">\n                    <DayWeather weatherType={entry.weather} />\n                    </div>\n                ))\n                ) : (\n                <p>No weather data available.</p>\n                )}\n            </div>\n        </div>\n\n    )\n}\n\nexport default WeatherData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}