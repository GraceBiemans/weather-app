{"ast":null,"code":"var _jsxFileName = \"/Users/g/Desktop/weather/src/js/WeatherData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherData = selectedCityObject => {\n  _s();\n  const [weatherData, setWeatherData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  console.log(`Received data => ${JSON.stringify(selectedCityObject)}`);\n  let longitude, latitude;\n  console.log(selectedCityObject);\n  if (selectedCityObject.city !== '') {\n    latitude = JSON.parse(selectedCityObject.latitude);\n    longitude = selectedCityObject.longitude;\n    console.log(latitude);\n  }\n  const url = `http://www.7timer.info/bin/api.pl?lon=${longitude}&lat=${latitude}&product=civillight&output=json`;\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data && data.dataseries) {\n          setWeatherData(data.dataseries);\n        } else {\n          setError('No weather data found');\n        }\n      } catch (err) {\n        setError('Error fetching weather data');\n        console.error('Error fetching weather data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchWeatherData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading weather data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"weather-container\",\n      children: weatherData.length > 0 ? weatherData.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Weather:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), \" \", entry.weather]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No weather data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherData, \"gMh8CXeyt+Z1Z5re5bOIyGwxIjA=\");\n_c = WeatherData;\nexport default WeatherData;\nvar _c;\n$RefreshReg$(_c, \"WeatherData\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WeatherData","selectedCityObject","_s","weatherData","setWeatherData","loading","setLoading","error","setError","console","log","JSON","stringify","longitude","latitude","city","parse","url","fetchWeatherData","response","fetch","data","json","dataseries","err","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","id","length","map","entry","index","className","weather","_c","$RefreshReg$"],"sources":["/Users/g/Desktop/weather/src/js/WeatherData.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\n\nconst WeatherData = (selectedCityObject) => {\n\n    const [weatherData, setWeatherData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    console.log(`Received data => ${JSON.stringify(selectedCityObject)}`)\n\n    let longitude, latitude;\n\n    console.log(selectedCityObject)\n    if (selectedCityObject.city !== '') {\n        latitude = JSON.parse(selectedCityObject.latitude);\n        longitude = selectedCityObject.longitude;\n\n        console.log(latitude)\n    }\n\n    const url = `http://www.7timer.info/bin/api.pl?lon=${longitude}&lat=${latitude}&product=civillight&output=json`;\n\n    useEffect(() => {\n        const fetchWeatherData = async () => {\n            try {\n                setLoading(true);\n\n                const response = await fetch(url);\n                const data = await response.json();\n\n                if (data && data.dataseries) {\n                    setWeatherData(data.dataseries);\n                } else {\n                    setError('No weather data found');\n                }\n            } catch (err) {\n                setError('Error fetching weather data');\n                console.error('Error fetching weather data:', err);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchWeatherData();\n    }, []);\n\n    return (\n        <div>\n            {loading && <p>Loading weather data...</p>}\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n\n            <div id=\"weather-container\">\n                {weatherData.length > 0 ? (\n                weatherData.map((entry, index) => (\n                    <div key={index} className=\"weather-item\">\n                    <strong>Weather:</strong> {entry.weather}\n                    </div>\n                ))\n                ) : (\n                <p>No weather data available.</p>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default WeatherData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}