{"ast":null,"code":"var _jsxFileName = \"/Users/g/Desktop/weather/src/js/CityDropdown.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport cityData from '../city_coordinates.json';\nimport '../css/CityDropdown.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CityDropdown = ({\n  onCityChange\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState('');\n  const options = cityData;\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleOptionSelect = option => {\n    setSelectedOption(option.city);\n    console.log(option.city);\n    onCityChange(option);\n    setIsOpen(false); // Close dropdown after selection\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"city-dropdown-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"dropdown\",\n      children: \"Choose a city: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-dropdown\",\n      onClick: toggleDropdown,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-selected\",\n        children: selectedOption || 'Select a city'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dropdown-options\",\n        children: options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"dropdown-option\",\n          onClick: () => handleOptionSelect(JSON.stringify(option)),\n          children: [option.city, \", \", option.country]\n        }, option.city, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(CityDropdown, \"N4/prYmjR/a8jQ0KR5sSmMtlt6o=\");\n_c = CityDropdown;\nexport default CityDropdown;\nvar _c;\n$RefreshReg$(_c, \"CityDropdown\");","map":{"version":3,"names":["React","useState","cityData","jsxDEV","_jsxDEV","CityDropdown","onCityChange","_s","isOpen","setIsOpen","selectedOption","setSelectedOption","options","toggleDropdown","handleOptionSelect","option","city","console","log","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","JSON","stringify","country","_c","$RefreshReg$"],"sources":["/Users/g/Desktop/weather/src/js/CityDropdown.js"],"sourcesContent":["import React, { useState } from 'react';\nimport cityData from '../city_coordinates.json';\nimport '../css/CityDropdown.css';\n\nconst CityDropdown = ({ onCityChange }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState('');\n\n  const options = cityData;\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleOptionSelect = (option) => {\n    setSelectedOption(option.city);\n    console.log(option.city)\n    onCityChange(option);\n    setIsOpen(false); // Close dropdown after selection\n  };\n\n  return (\n    <div className=\"city-dropdown-container\">\n      <label htmlFor=\"dropdown\">Choose a city: </label>\n\n      <div className=\"custom-dropdown\" onClick={toggleDropdown}>\n        <div className=\"dropdown-selected\">\n          {selectedOption || 'Select a city'}\n        </div>\n\n        {isOpen && (\n          <ul className=\"dropdown-options\">\n            {options.map((option) => (\n              <li\n                key={option.city}\n                className=\"dropdown-option\"\n                onClick={() => handleOptionSelect(JSON.stringify(option))}\n              >\n                {option.city}, {option.country}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CityDropdown;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMW,OAAO,GAAGV,QAAQ;EAExB,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAC3BJ,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,MAAMM,kBAAkB,GAAIC,MAAM,IAAK;IACrCJ,iBAAiB,CAACI,MAAM,CAACC,IAAI,CAAC;IAC9BC,OAAO,CAACC,GAAG,CAACH,MAAM,CAACC,IAAI,CAAC;IACxBV,YAAY,CAACS,MAAM,CAAC;IACpBN,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,oBACEL,OAAA;IAAKe,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBACtChB,OAAA;MAAOiB,OAAO,EAAC,UAAU;MAAAD,QAAA,EAAC;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAEjDrB,OAAA;MAAKe,SAAS,EAAC,iBAAiB;MAACO,OAAO,EAAEb,cAAe;MAAAO,QAAA,gBACvDhB,OAAA;QAAKe,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC/BV,cAAc,IAAI;MAAe;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,EAELjB,MAAM,iBACLJ,OAAA;QAAIe,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAC7BR,OAAO,CAACe,GAAG,CAAEZ,MAAM,iBAClBX,OAAA;UAEEe,SAAS,EAAC,iBAAiB;UAC3BO,OAAO,EAAEA,CAAA,KAAMZ,kBAAkB,CAACc,IAAI,CAACC,SAAS,CAACd,MAAM,CAAC,CAAE;UAAAK,QAAA,GAEzDL,MAAM,CAACC,IAAI,EAAC,IAAE,EAACD,MAAM,CAACe,OAAO;QAAA,GAJzBf,MAAM,CAACC,IAAI;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKd,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CACL;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClB,EAAA,CA1CIF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AA4ClB,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}